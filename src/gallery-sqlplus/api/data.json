{
    "project": {
        "name": "SQL*Plus",
        "description": "This module provides an interface to an Oracle database from Node.js.  It requires Oracle's SQL*Plus application to be installed.  This module runs SQL*Plus as a child process and communicates through stdin and stdout."
    },
    "files": {
        "js/sqlplus.js": {
            "name": "js/sqlplus.js",
            "modules": {
                "gallery-sqlplus": 1
            },
            "classes": {
                "SqlPlus": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "gallery-sqlplus": {
            "name": "gallery-sqlplus",
            "submodules": {},
            "classes": {
                "SqlPlus": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/sqlplus.js",
            "line": 1,
            "description": "This module provides an interface to an Oracle database from Node.js.\nIt requires Oracle's SQL*Plus application to be installed.\nThis module runs SQL*Plus as a child process and communicates through stdin and stdout."
        }
    },
    "classes": {
        "SqlPlus": {
            "name": "SqlPlus",
            "shortname": "SqlPlus",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-sqlplus",
            "namespace": "",
            "file": "js/sqlplus.js",
            "line": 19,
            "is_constructor": 1,
            "extends": "Base",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object.",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "js/sqlplus.js",
            "line": 30,
            "description": "Array of command line arguments, excluding database connection information.\nThis class expects to receive HTML output from SQL*Plus.  The default args enable HTML output mode in SQL*Plus.\nWhen setting custom args, be sure to enable HTML output mode.",
            "itemtype": "attribute",
            "name": "args",
            "default": "['-MARKUP', 'HTML ON']",
            "initonly": "",
            "type": "Array",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 46,
            "description": "The sqlplus command.  If SQL*Plus is installed and in the system path, the default value should work fine.",
            "itemtype": "attribute",
            "name": "command",
            "default": "'sqlplus'",
            "initonly": "",
            "type": "String",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 57,
            "description": "Database conntection information.\nIf the value is a String, it should be in the following format: 'user/password@host/database'\nIf the value is an Object it should have the following properties: database, host, password, user\nTry connecting to a database with SQL*Plus on the command line to figure out exactly what values need to be entered here.",
            "itemtype": "attribute",
            "name": "connection",
            "initonly": "",
            "type": "String",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 76,
            "description": "This class directly reads and writes from the SQL*Plus shell.\nIt will look for this prompt value to know it's ready to send another command.\nWhen SQL*Plus is in HTML output mode, characters in the prompt will be HTML encoded.",
            "itemtype": "attribute",
            "name": "prompt",
            "default": "'SQL&gt; '",
            "type": "String",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 87,
            "description": "This will be true when the stdin of the SQL*Plus process is writable, its kernel buffer is not full,\nand the prompt string has been read from the stdout of the SQL*Plus pocess.",
            "itemtype": "attribute",
            "name": "ready",
            "default": "false",
            "readonly": "",
            "type": "Boolean",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 99,
            "description": "This is the SQL*Plus child process object.",
            "itemtype": "attribute",
            "name": "sqlPlus",
            "readonly": "",
            "type": "ChildProcess",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 113,
            "description": "Executes a query on the database.  This is a convenience wrapper around the write method.\nIf the stdout of the SQL*Plus process is currently returning data from a previous query,\nthe query will be queued until the prompt string is read.\nIf the stdin of the SQL*Plus process has reported its kernel buffer is full, the query will be queued until the drain event.\nNote that SQL*Plus by default does not auto commit queries individual.  SQL*Plus will perform a commit when it is terminated properly.",
            "itemtype": "method",
            "name": "execute",
            "chainable": 1,
            "params": [
                {
                    "name": "query",
                    "description": "The query string to execute.  Note that SQL*Plus requires queries to end with a ';'.\nWarning: If the ';' is missing, the query will be sent to the SQL*Plus shell, then the shell will detect that the query is\nincomplete and it will wait for more input.  This class currently does not handle the waiting for more imput state.\nForgetting the ';' will break the communication between this class and the SQL*Plus process.\nWarning: This method accepts the query string as is and passes it to SQL*Plus.  There are no prepared statements, no data binding,\nand no checks to make sure values are properly escaped and quoted.  There are no safeguards here against sql injection attacks.\nWarning: There are certain characters which may be unexpectedly interpreted incorrectly by SQL*Plus.  See comments on the write method.",
                    "type": "String"
                },
                {
                    "name": "callbackFunction",
                    "description": "A function which receives two arguments:\n<dl>\n    <dt>\n        error\n    </dt>\n    <dd>\n        The error string returned by SQL*Plus or null.  If an error is returned, data will be null.\n    </dd>\n    <dt>\n        data\n    </dt>\n    <dd>\n        <ul>\n            <li>\n                A SELECT query will return an array of objects.  There will be one object per row of data returned.\n                The array may be empty.  Each object will have the same property.  The property names will be complete strings of\n                the column names returned by SQL*Plus.  For example the query, \"SELECT count(*) FROM users;\" will\n                return an array with one object.  That object will have one property called 'COUNT(*)'.  In cases of complex names\n                I recommend renaming the columns like this, \"SELECT count(*) AS count FROM users;\".  For Oracle number column types,\n                the values returned should be numbers or null.  For Oracle text column types, the values returned should be strings\n                or null.  Oracle date and time column types get converted to text; I recommend using the PL/SQL TO_CHAR function to\n                manually specify the date and time formats that are returned.  Oracle clob values appear to be selectable just like\n                other text values except they may get truncated to 2000000000 characters.  All returned string values will have\n                leading and trailing whitespace trimmed.  Other column types have not been tested.  Complex column types could\n                probably be made to work, but have not been implemented.\n            </li>\n            <li>\n                A DELETE, INSERT, or UPDATE statemet query will return the number rows affected by the query.\n            </li>\n            <li>\n                Other types of queries have not been tested and aren't supported by the execute method.  Refer to the write method\n                for more information.\n            </li>\n    </dd>\n</dl>",
                    "type": "Function"
                },
                {
                    "name": "contextObject",
                    "description": "(optional) An object to provide as the execution context for the callback function.",
                    "type": "Object"
                }
            ],
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 218,
            "description": "Fires when the SQL*Plus process exits.  Note that SQL*Plus provides a shell interface and does not terminate by itself.\nWhile a Sql*Plus process is running, the parent process will not terminate by itself either.  To terminate the SQL*Plus process,\npass 'exit\\n' or 'quit\\n' to the write method, or call the kill method on the sqlPlus attribute Child Process object.",
            "itemtype": "event",
            "name": "exit",
            "params": [
                {
                    "name": "code",
                    "description": "If the SQL*Plus process terminated normally, code is the final exit code, otherwise null.",
                    "type": "Number|null"
                },
                {
                    "name": "signal",
                    "description": "If the SQL*Plus process terminated due to receipt of a signal,\nsignal is the string name of the signal, otherwise null.",
                    "type": "String|null"
                }
            ],
            "preventable": "destroy",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 235,
            "description": "Fires when a complete response has been received from SQL*Plus.  This is not the indended way to receive responses from SQL*Plus\nqueries sent throught the execute or write methods.  Use the callback function arguments of those methods to get the response.\nPreventing this event will prevent callback functions associated with this specific response from being called.",
            "itemtype": "event",
            "name": "response",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                }
            ],
            "preventable": "",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 309,
            "description": "Sends data to the SQL*Plus shell.\nIf the stdout of the SQL*Plus process is currently returning data from a previous command,\nthis data will be queued until the prompt string is read.\nIf the stdin of the SQL*Plus process has reported its kernel buffer is full, this data will be queued until the drain event.\nNote that SQL*Plus shell requires 'pressing enter' to execute a command.  Append a '\\n' character to all commands for this to work.\nWarning: If the '\\n' is missing, the data will be sent to the SQL*Plus shell, then the shell will continue waiting for input until\n'enter is pressed'.  While the shell is waiting, the callback function will never fire.  The write method can continue to be invoked.\nEach call to write will append more data to the shell until '\\n' is received.  When the shell responds to the command, all callback\nfunctions associated with this command will fire.\nWarning: I'm not sure what will happen if '\\n' occurs in the middle of a command.",
            "itemtype": "method",
            "name": "write",
            "chainable": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The data to write.",
                    "type": "Buffer|String"
                },
                {
                    "name": "callbackFunction",
                    "description": "(optional) A function that receives one argument, the response as a Node object.",
                    "type": "Function"
                },
                {
                    "name": "contextObject",
                    "description": "(optional) An object to provide as the execution context for the callback function.",
                    "type": "Object"
                }
            ],
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 342,
            "itemtype": "method",
            "name": "_readTableData",
            "params": [
                {
                    "name": "tableNode",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "callbackFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "contextObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        },
        {
            "file": "js/sqlplus.js",
            "line": 395,
            "itemtype": "method",
            "name": "_write",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Buffer|String"
                },
                {
                    "name": "callbackFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "contextObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SqlPlus",
            "module": "gallery-sqlplus"
        }
    ]
}